// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ruqtmR7xJLFyvce3Fq2SGS
// Component: Sr3h47G2P3
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project_mobile_first.module.css"; // plasmic-import: ruqtmR7xJLFyvce3Fq2SGS/projectcss
import * as sty from "./PlasmicWycieczki.module.css"; // plasmic-import: Sr3h47G2P3/css

export type PlasmicWycieczki__VariantMembers = {};

export type PlasmicWycieczki__VariantsArgs = {};
type VariantPropType = keyof PlasmicWycieczki__VariantsArgs;
export const PlasmicWycieczki__VariantProps = new Array<VariantPropType>();

export type PlasmicWycieczki__ArgsType = {};
type ArgPropType = keyof PlasmicWycieczki__ArgsType;
export const PlasmicWycieczki__ArgProps = new Array<ArgPropType>();

export type PlasmicWycieczki__OverridesType = {
  root?: p.Flex<"div">;
  textbox?: p.Flex<"input">;
};

export interface DefaultWycieczkiProps {
  className?: string;
}

function PlasmicWycieczki__RenderFunc(props: {
  variants: PlasmicWycieczki__VariantsArgs;
  args: PlasmicWycieczki__ArgsType;
  overrides: PlasmicWycieczki__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
      </Head>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <input
            data-plasmic-name={"textbox"}
            data-plasmic-override={overrides.textbox}
            className={classNames(defaultcss.input, sty.textbox)}
            placeholder={"Some placeholder" as const}
            size={1 as const}
            type={"text" as const}
            value={"Some value" as const}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "textbox"],
  textbox: ["textbox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  textbox: "input";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWycieczki__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicWycieczki__VariantsArgs;
  args?: PlasmicWycieczki__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicWycieczki__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicWycieczki__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicWycieczki__ArgProps,
      internalVariantPropNames: PlasmicWycieczki__VariantProps
    });

    return PlasmicWycieczki__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWycieczki";
  } else {
    func.displayName = `PlasmicWycieczki.${nodeName}`;
  }
  return func;
}

export const PlasmicWycieczki = Object.assign(
  // Top-level PlasmicWycieczki renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textbox: makeNodeComponent("textbox"),

    // Metadata about props expected for PlasmicWycieczki
    internalVariantProps: PlasmicWycieczki__VariantProps,
    internalArgProps: PlasmicWycieczki__ArgProps
  }
);

export default PlasmicWycieczki;
/* prettier-ignore-end */
